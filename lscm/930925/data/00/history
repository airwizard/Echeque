
miner.start()
eth.accounts
eth.compile.solidity('pragma solidity ^0.4.2; ')
contract EChequeRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract ECheque {      string public eUnit;     string public eChequeNo;     uint8 public decimals;     uint256 public totalSupply;          mapping (address => uint256) public balanceOf;     mapping (address => mapping (address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);          function ECheque(         uint256 initialSupply,         string monetaryUnit,         string chequeNumber,         uint8 decimalUnits         ) {         balanceOf[msg.sender] = initialSupply;               totalSupply = initialSupply;              eUnit = monetaryUnit;         eChequeNo = chequeNumber;         decimals = decimalUnits;                            }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          balanceOf[msg.sender] -= _value;                              balanceOf[_to] += _value;                                     Transfer(msg.sender, _to, _value);                        }          function approve(address _spender, uint256 _value)         returns (bool success) {         allowance[msg.sender][_spender] = _value;         return true;     }          function approveAndCall(address _spender, uint256 _value, bytes _extraData)         returns (bool success) {         EChequeRecipient spender = EChequeRecipient(_spender);         if (approve(_spender, _value)) {             spender.receiveApproval(msg.sender, _value, this, _extraData);             return true;         }     }            function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {         if (balanceOf[_from] < _value) throw;         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          if (_value > allowance[_from][msg.sender]) throw;            balanceOf[_from] -= _value;                                   balanceOf[_to] += _value;                                     allowance[_from][msg.sender] -= _value;         Transfer(_from, _to, _value);         return true;     }     function () {         throw;          } }
eth.compile.solidity('pragma solidity ^0.4.2; ')
contract EChequeRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract ECheque {      string public eUnit;     string public eChequeNo;     uint8 public decimals;     uint256 public totalSupply;          mapping (address => uint256) public balanceOf;     mapping (address => mapping (address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);          function ECheque(         uint256 initialSupply,         string monetaryUnit,         string chequeNumber,         uint8 decimalUnits         ) {         balanceOf[msg.sender] = initialSupply;               totalSupply = initialSupply;              eUnit = monetaryUnit;         eChequeNo = chequeNumber;         decimals = decimalUnits;                            }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          balanceOf[msg.sender] -= _value;                              balanceOf[_to] += _value;                                     Transfer(msg.sender, _to, _value);                        }          function approve(address _spender, uint256 _value)         returns (bool success) {         allowance[msg.sender][_spender] = _value;         return true;     }          function approveAndCall(address _spender, uint256 _value, bytes _extraData)         returns (bool success) {         EChequeRecipient spender = EChequeRecipient(_spender);         if (approve(_spender, _value)) {             spender.receiveApproval(msg.sender, _value, this, _extraData);             return true;         }     }            function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {         if (balanceOf[_from] < _value) throw;         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          if (_value > allowance[_from][msg.sender]) throw;            balanceOf[_from] -= _value;                                   balanceOf[_to] += _value;                                     allowance[_from][msg.sender] -= _value;         Transfer(_from, _to, _value);         return true;     }     function () {         throw;          } }
eth.compile.solidity('pragma solidity ^0.4.2; 
contract EChequeRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }   
contract ECheque {      string public eUnit;     string public eChequeNo;     uint8 public decimals;     uint256 public totalSupply;          mapping (address => uint256) public balanceOf;     mapping (address => mapping (address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);          function ECheque(         uint256 initialSupply,         string monetaryUnit,         string chequeNumber,         uint8 decimalUnits         ) {         balanceOf[msg.sender] = initialSupply;               totalSupply = initialSupply;              eUnit = monetaryUnit;         eChequeNo = chequeNumber;         decimals = decimalUnits;                            }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          balanceOf[msg.sender] -= _value;                              balanceOf[_to] += _value;                                     Transfer(msg.sender, _to, _value);                        }          function approve(address _spender, uint256 _value)         returns (bool success) {         allowance[msg.sender][_spender] = _value;         return true;     }          function approveAndCall(address _spender, uint256 _value, bytes _extraData)         returns (bool success) {         EChequeRecipient spender = EChequeRecipient(_spender);         if (approve(_spender, _value)) {             spender.receiveApproval(msg.sender, _value, this, _extraData);             return true;         }     }            function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {         if (balanceOf[_from] < _value) throw;         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          if (_value > allowance[_from][msg.sender]) throw;            balanceOf[_from] -= _value;                                   balanceOf[_to] += _value;                                     allowance[_from][msg.sender] -= _value;         Transfer(_from, _to, _value);         return true;     }     function () {         throw;          } } ')
eth.compile.solidity('pragma solidity ^0.4.2; 
contract EChequeRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }   
')
eth.compile.solidity('pragma solidity ^0.4.2; 
')
eth.compile.solidity('pragma solidity ^0.4.2;  contract EChequeRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }   contract ECheque {      string public eUnit;     string public eChequeNo;     uint8 public decimals;     uint256 public totalSupply;          mapping (address => uint256) public balanceOf;     mapping (address => mapping (address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);          function ECheque(         uint256 initialSupply,         string monetaryUnit,         string chequeNumber,         uint8 decimalUnits         ) {         balanceOf[msg.sender] = initialSupply;               totalSupply = initialSupply;              eUnit = monetaryUnit;         eChequeNo = chequeNumber;         decimals = decimalUnits;                            }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          balanceOf[msg.sender] -= _value;                              balanceOf[_to] += _value;                                     Transfer(msg.sender, _to, _value);                        }          function approve(address _spender, uint256 _value)         returns (bool success) {         allowance[msg.sender][_spender] = _value;         return true;     }          function approveAndCall(address _spender, uint256 _value, bytes _extraData)         returns (bool success) {         EChequeRecipient spender = EChequeRecipient(_spender);         if (approve(_spender, _value)) {             spender.receiveApproval(msg.sender, _value, this, _extraData);             return true;         }     }            function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {         if (balanceOf[_from] < _value) throw;         if (balanceOf[_to] + _value < balanceOf[_to]) throw;          if (_value > allowance[_from][msg.sender]) throw;            balanceOf[_from] -= _value;                                   balanceOf[_to] += _value;                                     allowance[_from][msg.sender] -= _value;         Transfer(_from, _to, _value);         return true;     }     function () {         throw;          } } ')
eth.compile.solidity('contract MyToken {      mapping (address => uint256) public balanceOf;     function MyToken(         uint256 initialSupply         ) {         balanceOf[msg.sender] = initialSupply;                   }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw;                  if (balanceOf[_to] + _value < balanceOf[_to]) throw;         balanceOf[msg.sender] -= _value;                             balanceOf[_to] += _value;                            } }')
mycontra = eth.compile.solidity('contract MyToken {      mapping (address => uint256) public balanceOf;     function MyToken(         uint256 initialSupply         ) {         balanceOf[msg.sender] = initialSupply;                   }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw;                  if (balanceOf[_to] + _value < balanceOf[_to]) throw;         balanceOf[msg.sender] -= _value;                             balanceOf[_to] += _value;                            } }')
mycontra.code
mycontra.MyToken.code
mycontra.MyToken.
mycontra.MyToken
eth.compile.solidity('pragma solidity ^0.4.2;')
contract EChequeRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
contract ECheque {
    string public eUnit;
    string public eChequeNo;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    function ECheque(
        uint256 initialSupply,
        string monetaryUnit,
        string chequeNumber,
        uint8 decimalUnits
        ) {
        balanceOf[msg.sender] = initialSupply;       
        totalSupply = initialSupply; 
        eUnit = monetaryUnit;
        eChequeNo = chequeNumber;
        decimals = decimalUnits;    
    }
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;  
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; 
        balanceOf[msg.sender] -= _value;      
        balanceOf[_to] += _value;          
        Transfer(msg.sender, _to, _value);   
    }
    function approve(address _spender, uint256 _value)
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        returns (bool success) {
        EChequeRecipient spender = EChequeRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }  
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balanceOf[_from] < _value) throw;
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
        if (_value > allowance[_from][msg.sender]) throw; 
        balanceOf[_from] -= _value;      
        balanceOf[_to] += _value;       
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    function () {
        throw;    
    }
}
eth.compile.solidity('pragma solidity ^0.4.2; contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }  contract MyToken {     string public standard = 'Token 0.1';     string public name;     string public symbol;     uint8 public decimals;     uint256 public totalSupply;          mapping (address => uint256) public balanceOf;     mapping (address => mapping (address => uint256)) public allowance;      event Transfer(address indexed from, address indexed to, uint256 value);      function MyToken(         uint256 initialSupply,         string tokenName,         uint8 decimalUnits,         string tokenSymbol         ) {         balanceOf[msg.sender] = initialSupply;           totalSupply = initialSupply;                      name = tokenName;                                 symbol = tokenSymbol;                        decimals = decimalUnits;                }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw;            if (balanceOf[_to] + _value < balanceOf[_to]) throw;          balanceOf[msg.sender] -= _value;              balanceOf[_to] += _value;                   Transfer(msg.sender, _to, _value);         }           function approve(address _spender, uint256 _value)         returns (bool success) {         allowance[msg.sender][_spender] = _value;         return true;     }          function approveAndCall(address _spender, uint256 _value, bytes _extraData)         returns (bool success) {         tokenRecipient spender = tokenRecipient(_spender);         if (approve(_spender, _value)) {             spender.receiveApproval(msg.sender, _value, this, _extraData);             return true;         }     }                  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {         if (balanceOf[_from] < _value) throw;          if (balanceOf[_to] + _value < balanceOf[_to]) throw;         if (_value > allowance[_from][msg.sender]) throw;            balanceOf[_from] -= _value;                   balanceOf[_to] += _value;                    allowance[_from][msg.sender] -= _value;         Transfer(_from, _to, _value);         return true;     }       function () {         throw;       } }')
mycontra = eth.compile.solidity('contract MyToken {      mapping (address => uint256) public balanceOf;     function MyToken(         uint256 initialSupply         ) {         balanceOf[msg.sender] = initialSupply;                   }      function transfer(address _to, uint256 _value) {         if (balanceOf[msg.sender] < _value) throw;                  if (balanceOf[_to] + _value < balanceOf[_to]) throw;         balanceOf[msg.sender] -= _value;                             balanceOf[_to] += _value;                            } }')
mycontra
mycontra./tmp/geth-compile-solidity220701655:MyToken
mycontra.geth-compile-solidity220701655:MyToken
mycontra.MyToken
mycontra.list
mycontra.220701655:MyToken
mycontra.220701655
mycontra
mycontra[0]
type(mycontra)
mycontra.type
miner.start(1)
miner.stop
miner.stop()
miner.start(1)
eth.compile.solidity('contract test { function multiply(uint a) constant returns(uint d) { return a * 7; }}')
miner.stop
miner.stop()
eth.getTransaction('0x6690a366e18d87df0c8f5653e908fc32c54cc799c22d67446566739c41da26ea')
eth.getTransactionReceipt('0x6690a366e18d87df0c8f5653e908fc32c54cc799c22d67446566739c41da26ea')
miner.start(1)
miner.stop()
miner.start()
eth.getTransactionReceipt('0xd2f43d7dda385eb4e0cf7b420c4c03c20cb0c90360540987ffe86a511a6708ed')
eth.getTransaction('0xd2f43d7dda385eb4e0cf7b420c4c03c20cb0c90360540987ffe86a511a6708ed')
miner.stop()
eth.getTransactionReceipt('0xd2f43d7dda385eb4e0cf7b420c4c03c20cb0c90360540987ffe86a511a6708ed')
miner.start(1)
eth.getTransactionReceipt('0xd2f43d7dda385eb4e0cf7b420c4c03c20cb0c90360540987ffe86a511a6708ed')
miner.stop()
eth.getBlock(2240)
eth.getBlock(2245)
eth.getBlock(2246)
eth.getBlock(2244)
eth.getBlock(2243)
eth.getBlock(2242)
eth.getBlock(2241)
eth.getBlock(2240)
eth.getBlock(22439)
eth.getBlock(2239)
eth.getBlock(22338)
eth.getBlock(2238)
eth.getBlock(2245)
eth.getTransactionReceipt('0x6777923bbe46b341f8f515c6bab8c3cba849a3c15f438ba8fc1d0f41e3c1906b')
eth.getTransactionReceipt('0xd2f43d7dda385eb4e0cf7b420c4c03c20cb0c90360540987ffe86a511a6708ed')
eth.getTransaction('0xd2f43d7dda385eb4e0cf7b420c4c03c20cb0c90360540987ffe86a511a6708ed')
eth.getTransaction("0x6690a366e18d87df0c8f5653e908fc32c54cc799c22d67446566739c41da26ea")
eth.getTransactionReceipt("0x6690a366e18d87df0c8f5653e908fc32c54cc799c22d67446566739c41da26ea")
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
eth.getBlock(376)
eth.getBlock(375)
miner.start(1)
getBlock(124)
eth.getBlock(124)
eth.getTransaction('0x649078e13eefa5069ec999263e27868450b831062196b8154eeada5133bee09a')
eth.getTransactionReceipt('0x649078e13eefa5069ec999263e27868450b831062196b8154eeada5133bee09a')
miner.stop()
miner.stop(421)
eth.getBlock(421)
eth.getBlock(422)
eth.getTransactionReceipt('0xe1444ad2b399aa136cf377ff38e82c9832293cc6587650cea2a9e9866a44dfa8')
miner.start(1)
miner.stop
miner.stop()
eth.getTransaction('0xe1444ad2b399aa136cf377ff38e82c9832293cc6587650cea2a9e9866a44dfa8')
var tokenSource = 'contract Token {     address issuer;     mapping (address => uint) balances;      event Issue(address account, uint amount);     event Transfer(address from, address to, uint amount);      function Token() {         issuer = msg.sender;     }      function issue(address account, uint amount) {         if (msg.sender != issuer) throw;         balances[account] += amount;     }      function transfer(address to, uint amount) {         if (balances[msg.sender] < amount) throw;          balances[msg.sender] -= amount;         balances[to] += amount;          Transfer(msg.sender, to, amount);     }      function getBalance(address account) constant returns (uint) {         return balances[account];     } }';
tokenSource
var tokenCompiled = web3.eth.compile.solidity(tokenSource);
var contract = web3.eth.contract(tokenCompiled.Token.info.abiDefinition);
tokenCompiled
var tokenCompiled = {
{
Token: {
code: "0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6101ca806100396000396000f300606060405263ffffffff60e060020a600035041663867904b48114610037578063a9059cbb14610058578063f8b2cb4f14610079575bfe5b341561003f57fe5b610056600160a060020a03600435166024356100a7565b005b341561006057fe5b610056600160a060020a03600435166024356100e6565b005b341561008157fe5b610095600160a060020a036004351661017f565b60408051918252519081900360200190f35b60005433600160a060020a039081169116146100c35760006000fd5b600160a060020a03821660009081526001602052604090208054820190555b5050565b600160a060020a0333166000908152600160205260409020548190101561010d5760006000fd5b600160a060020a0333811660008181526001602090815260408083208054879003905593861680835291849020805486019055835192835282015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15b5050565b600160a060020a0381166000908152600160205260409020545b9190505600a165627a7a7230582082665e63d987a5565014781764f7a90a21e7c30e64657e704cf2b749dd6815590029",
    info: {
      abiDefinition: [{...}, {...}, {...}, {...}, {...}, {...}],
      compilerOptions: "--combined-json bin,abi,userdoc,devdoc --add-std --optimize",
      compilerVersion: "0.4.10",
      developerDoc: {
        methods: {}
      },
      language: "Solidity",
      languageVersion: "0.4.10",
      source: "contract Token {     address issuer;     mapping (address => uint) balances;      event Issue(address account, uint amount);     event Transfer(address from, address to, uint amount);      function Token() {         issuer = msg.sender;     }      function issue(address account, uint amount) {         if (msg.sender != issuer) throw;         balances[account] += amount;     }      function transfer(address to, uint amount) {         if (balances[msg.sender] < amount) throw;          balances[msg.sender] -= amount;         balances[to] += amount;          Transfer(msg.sender, to, amount);     }      function getBalance(address account) constant returns (uint) {         return balances[account];     } }",
      userDoc: {
        methods: {}
      }
    }
  }
}
}}}
var tokenCompiled = {
  Token: {
    code: "0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6101ca806100396000396000f300606060405263ffffffff60e060020a600035041663867904b48114610037578063a9059cbb14610058578063f8b2cb4f14610079575bfe5b341561003f57fe5b610056600160a060020a03600435166024356100a7565b005b341561006057fe5b610056600160a060020a03600435166024356100e6565b005b341561008157fe5b610095600160a060020a036004351661017f565b60408051918252519081900360200190f35b60005433600160a060020a039081169116146100c35760006000fd5b600160a060020a03821660009081526001602052604090208054820190555b5050565b600160a060020a0333166000908152600160205260409020548190101561010d5760006000fd5b600160a060020a0333811660008181526001602090815260408083208054879003905593861680835291849020805486019055835192835282015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15b5050565b600160a060020a0381166000908152600160205260409020545b9190505600a165627a7a7230582082665e63d987a5565014781764f7a90a21e7c30e64657e704cf2b749dd6815590029",
    info: {
      abiDefinition: [{...}, {...}, {...}, {...}, {...}, {...}],
      compilerOptions: "--combined-json bin,abi,userdoc,devdoc --add-std --optimize",
      compilerVersion: "0.4.10",
      developerDoc: {
        methods: {}
      },
      language: "Solidity",
      languageVersion: "0.4.10",
      source: "contract Token {     address issuer;     mapping (address => uint) balances;      event Issue(address account, uint amount);     event Transfer(address from, address to, uint amount);      function Token() {         issuer = msg.sender;     }      function issue(address account, uint amount) {         if (msg.sender != issuer) throw;         balances[account] += amount;     }      function transfer(address to, uint amount) {         if (balances[msg.sender] < amount) throw;          balances[msg.sender] -= amount;         balances[to] += amount;          Transfer(msg.sender, to, amount);     }      function getBalance(address account) constant returns (uint) {         return balances[account];     } }",
      userDoc: {
        methods: {}
      }
    }
  }
}
var tokenCompiled = {
{
Token: {
code: "0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6101ca806100396000396000f300606060405263ffffffff60e060020a600035041663867904b48114610037578063a9059cbb14610058578063f8b2cb4f14610079575bfe5b341561003f57fe5b610056600160a060020a03600435166024356100a7565b005b341561006057fe5b610056600160a060020a03600435166024356100e6565b005b341561008157fe5b610095600160a060020a036004351661017f565b60408051918252519081900360200190f35b60005433600160a060020a039081169116146100c35760006000fd5b600160a060020a03821660009081526001602052604090208054820190555b5050565b600160a060020a0333166000908152600160205260409020548190101561010d5760006000fd5b600160a060020a0333811660008181526001602090815260408083208054879003905593861680835291849020805486019055835192835282015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15b5050565b600160a060020a0381166000908152600160205260409020545b9190505600a165627a7a7230582082665e63d987a5565014781764f7a90a21e7c30e64657e704cf2b749dd6815590029",
    info: {
      abiDefinition: [{...}, {...}, {...}, {...}, {...}, {...}],
      compilerOptions: "--combined-json bin,abi,userdoc,devdoc --add-std --optimize",
      compilerVersion: "0.4.10",
      developerDoc: {
        methods: {}
      },
      language: "Solidity",
      languageVersion: "0.4.10",
      source: "contract Token {     address issuer;     mapping (address => uint) balances;      event Issue(address account, uint amount);     event Transfer(address from, address to, uint amount);      function Token() {         issuer = msg.sender;     }      function issue(address account, uint amount) {         if (msg.sender != issuer) throw;         balances[account] += amount;     }      function transfer(address to, uint amount) {         if (balances[msg.sender] < amount) throw;          balances[msg.sender] -= amount;         balances[to] += amount;          Transfer(msg.sender, to, amount);     }      function getBalance(address account) constant returns (uint) {         return balances[account];     } }",
      userDoc: {
        methods: {}
      }
    }
  }
}
}}}
var tokenCompiled = {
{
Token: {
code: "0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6101ca806100396000396000f300606060405263ffffffff60e060020a600035041663867904b48114610037578063a9059cbb14610058578063f8b2cb4f14610079575bfe5b341561003f57fe5b610056600160a060020a03600435166024356100a7565b005b341561006057fe5b610056600160a060020a03600435166024356100e6565b005b341561008157fe5b610095600160a060020a036004351661017f565b60408051918252519081900360200190f35b60005433600160a060020a039081169116146100c35760006000fd5b600160a060020a03821660009081526001602052604090208054820190555b5050565b600160a060020a0333166000908152600160205260409020548190101561010d5760006000fd5b600160a060020a0333811660008181526001602090815260408083208054879003905593861680835291849020805486019055835192835282015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15b5050565b600160a060020a0381166000908152600160205260409020545b9190505600a165627a7a7230582082665e63d987a5565014781764f7a90a21e7c30e64657e704cf2b749dd6815590029",
    info: {
      abiDefinition: [{...}, {...}, {...}, {...}, {...}, {...}],
      compilerOptions: "--combined-json bin,abi,userdoc,devdoc --add-std --optimize",
      compilerVersion: "0.4.10",
      developerDoc: {
        methods: {}
      },
      language: "Solidity",
      languageVersion: "0.4.10",
      source: "contract Token {     address issuer;     mapping (address => uint) balances;      event Issue(address account, uint amount);     event Transfer(address from, address to, uint amount);      function Token() {         issuer = msg.sender;     }      function issue(address account, uint amount) {         if (msg.sender != issuer) throw;         balances[account] += amount;     }      function transfer(address to, uint amount) {         if (balances[msg.sender] < amount) throw;          balances[msg.sender] -= amount;         balances[to] += amount;          Transfer(msg.sender, to, amount);     }      function getBalance(address account) constant returns (uint) {         return balances[account];     } }",
      userDoc: {
        methods: {}
      }
     }
}
}}}
var tokenCompiled = {
{
Token: {
code: "0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6101ca806100396000396000f300606060405263ffffffff60e060020a600035041663867904b48114610037578063a9059cbb14610058578063f8b2cb4f14610079575bfe5b341561003f57fe5b610056600160a060020a03600435166024356100a7565b005b341561006057fe5b610056600160a060020a03600435166024356100e6565b005b341561008157fe5b610095600160a060020a036004351661017f565b60408051918252519081900360200190f35b60005433600160a060020a039081169116146100c35760006000fd5b600160a060020a03821660009081526001602052604090208054820190555b5050565b600160a060020a0333166000908152600160205260409020548190101561010d5760006000fd5b600160a060020a0333811660008181526001602090815260408083208054879003905593861680835291849020805486019055835192835282015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15b5050565b600160a060020a0381166000908152600160205260409020545b9190505600a165627a7a7230582082665e63d987a5565014781764f7a90a21e7c30e64657e704cf2b749dd6815590029",
    info: {
      abiDefinition: [{...}, {...}, {...}, {...}, {...}, {...}],
      compilerOptions: "--combined-json bin,abi,userdoc,devdoc --add-std --optimize",
      compilerVersion: "0.4.10",
      developerDoc: {
        methods: {}
      },
      language: "Solidity",
      languageVersion: "0.4.10",
      source: "contract Token {     address issuer;     mapping (address => uint) balances;      event Issue(address account, uint amount);     event Transfer(address from, address to, uint amount);      function Token() {         issuer = msg.sender;     }      function issue(address account, uint amount) {         if (msg.sender != issuer) throw;         balances[account] += amount;     }      function transfer(address to, uint amount) {         if (balances[msg.sender] < amount) throw;          balances[msg.sender] -= amount;         balances[to] += amount;          Transfer(msg.sender, to, amount);     }      function getBalance(address account) constant returns (uint) {         return balances[account];     } }",
      userDoc: {
        methods: {}
      }
     }
}
}
}
var tokenCompiled = web3.eth.compile.solidity(tokenSource);
tokenCompiled
tokenCompiled./tmp/geth-compile-solidity898285749:Token
tokenCompiled.//tmp//geth-compile-solidity898285749:Token
tokenCompiled.//tmp//geth-compile-solidity898285749/:Token
tokenCompile.Token = tokenCompiled./tmp/geth-compile-solidity898285749:Token
tokenCompile.Token = tokenCompiled.tmpgeth-compile-solidity898285749:Token
tokenCompile.Token = tokenCompiled.tmpgeth-compile-solidity898285749Token
tokenCompiled.Token = tokenCompiled.tmpgeth-compile-solidity898285749Token
tokenCompile.Token = tokenCompiled./tmp/geth-compile-solidity898285749.Token
tokenCompile.Token = tokenCompiled.Token
var contract = web3.eth.contract([{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"amount","type":"uint256"}],"name":"issue","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Issue","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Transfer","type":"event"}])
contract
var token = contract.new(var initializer = {from: web3.eth.accounts[0], data: tokenCompiled.Token.code, gas: 300000};
var callback = function(e, contract){
    if(!e) {
      if(!contract.address) {
        console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
      } else {
        console.log("Contract mined!");
        console.log(contract);
      }
    }
};
var token = contract.new(initializer, callback);
'
:
;
ex
)
_}
]
,
;
"
'
ww     
)
var initializer = {from: web3.eth.accounts[0], data: tokenCompiled.Token.code, gas: 300000};
var callback = function(e, contract){
    if(!e) {
      if(!contract.address) {
        console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
      } else {
        console.log("Contract mined!");
        console.log(contract);
      }
    }
};
var token = contract.new(initializer, callback);
var initializer = {from: web3.eth.accounts[0], data: tokenCompiled.Token.code, gas: 300000};
var initializer = {from: web3.eth.accounts[0], data: '0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6101ca806100396000396000f300606060405263ffffffff60e060020a600035041663867904b48114610037578063a9059cbb14610058578063f8b2cb4f14610079575bfe5b341561003f57fe5b610056600160a060020a03600435166024356100a7565b005b341561006057fe5b610056600160a060020a03600435166024356100e6565b005b341561008157fe5b610095600160a060020a036004351661017f565b60408051918252519081900360200190f35b60005433600160a060020a039081169116146100c35760006000fd5b600160a060020a03821660009081526001602052604090208054820190555b5050565b600160a060020a0333166000908152600160205260409020548190101561010d5760006000fd5b600160a060020a0333811660008181526001602090815260408083208054879003905593861680835291849020805486019055835192835282015280820183905290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360600190a15b5050565b600160a060020a0381166000908152600160205260409020545b9190505600a165627a7a72305820363ac95faa9b9e65181a77a33e00890f85f9ea91a69ed2feae9e4f3374f413150029', gas: 300000};
var callback = function(e, contract){
    if(!e) {
      if(!contract.address) {
        console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
      } else {
        console.log("Contract mined!");
        console.log(contract);
      }
    }
;
;
_
}}}}
var token = contract.new(initializer);
token
miner.start(1)
eth.accounts
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
miner.start(1)
miner.stop()
eth.accounts
eth.getBalance("0xbc30f3d9609a52553908329cb8e67f4a9a28c991")
fromWei(99995048580000000000,'Ether')
web3.fromWei
web3.fromWei(99995048580000000000,'Ether')